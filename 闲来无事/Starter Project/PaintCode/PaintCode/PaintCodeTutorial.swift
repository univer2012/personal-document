//
//  PaintCodeTutorial.swift
//  PaintCodeTutorial
//
//  Created by AuthorName on 16/2/3.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class PaintCodeTutorial : NSObject {

    //// Cache

    private struct Cache {
        static let color2: UIColor = UIColor(red: 0.000, green: 0.757, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    public class var color2: UIColor { return Cache.color2 }

    //// Drawing Methods

    public class func drawStopwatch() {

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(15, 28, 220, 220))
        PaintCodeTutorial.color2.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(114, 0, 22, 34))
        PaintCodeTutorial.color2.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(199.14, 10.65))
        bezierPath.addLineToPoint(CGPointMake(216.11, 27.62))
        bezierPath.addLineToPoint(CGPointMake(204.8, 38.93))
        bezierPath.addCurveToPoint(CGPointMake(200.87, 35), controlPoint1: CGPointMake(204.8, 38.93), controlPoint2: CGPointMake(203.15, 37.28))
        bezierPath.addLineToPoint(CGPointMake(192, 35))
        bezierPath.addCurveToPoint(CGPointMake(192, 26.13), controlPoint1: CGPointMake(192, 35), controlPoint2: CGPointMake(192, 28.75))
        bezierPath.addCurveToPoint(CGPointMake(187.83, 21.96), controlPoint1: CGPointMake(189.6, 23.73), controlPoint2: CGPointMake(187.83, 21.96))
        bezierPath.addLineToPoint(CGPointMake(199.14, 10.65))
        bezierPath.closePath()
        PaintCodeTutorial.color2.setFill()
        bezierPath.fill()
    }

    public class func drawStopwatch_Hand() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 125, 110)

        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(3.58, -90.67))
        bezier2Path.addCurveToPoint(CGPointMake(3.58, -14.13), controlPoint1: CGPointMake(3.58, -90.67), controlPoint2: CGPointMake(3.58, -47.56))
        bezier2Path.addCurveToPoint(CGPointMake(14.58, 0.33), controlPoint1: CGPointMake(9.92, -12.38), controlPoint2: CGPointMake(14.58, -6.57))
        bezier2Path.addCurveToPoint(CGPointMake(3.58, 14.79), controlPoint1: CGPointMake(14.58, 7.23), controlPoint2: CGPointMake(9.92, 13.04))
        bezier2Path.addCurveToPoint(CGPointMake(3.58, 24.33), controlPoint1: CGPointMake(3.58, 20.73), controlPoint2: CGPointMake(3.58, 24.33))
        bezier2Path.addLineToPoint(CGPointMake(-4.42, 24.33))
        bezier2Path.addCurveToPoint(CGPointMake(-4.42, 14.79), controlPoint1: CGPointMake(-4.42, 24.33), controlPoint2: CGPointMake(-4.42, 20.73))
        bezier2Path.addCurveToPoint(CGPointMake(-15.42, 0.33), controlPoint1: CGPointMake(-10.76, 13.04), controlPoint2: CGPointMake(-15.42, 7.23))
        bezier2Path.addCurveToPoint(CGPointMake(-4.42, -14.13), controlPoint1: CGPointMake(-15.42, -6.57), controlPoint2: CGPointMake(-10.76, -12.38))
        bezier2Path.addCurveToPoint(CGPointMake(-4.42, -90.67), controlPoint1: CGPointMake(-4.42, -47.56), controlPoint2: CGPointMake(-4.42, -90.67))
        bezier2Path.addLineToPoint(CGPointMake(3.58, -90.67))
        bezier2Path.addLineToPoint(CGPointMake(3.58, -90.67))
        bezier2Path.closePath()
        UIColor.whiteColor().setFill()
        bezier2Path.fill()

        CGContextRestoreGState(context)
    }

}
